//SwingWorker subclass for calculating Fibonacci numbers
//in a background thread
import java.util.concurrent.ExecutionException;

import javax.swing.JLabel;
import javax.swing.SwingWorker;

public class BackgroundCalculator extends SwingWorker<Long, Object>{
	private final int n; // Fibonacci number to calculate
	private final JLabel resultJLabel;//JLabel to display the result
	
	//constructor
	public BackgroundCalculator(int n, JLabel resultJLabel) {
		this.n = n;
		this.resultJLabel = resultJLabel;
	}
	//long-running code to be run in a worker thread
	public Long doInBackground() {
		return nthFib = fibonacci(n);
	}
	protected void done() {
		try {
			//get the result of doInBackground and display it
			resultJLabel.setText(get().toString());
		} catch (InterruptedException ex) {
			// TODO: handle exception
			resultJLabel.setText("Interrupted while waiting for results.");
		}catch (ExecutionException ex) {
			// TODO: handle exception
			resultJLabel.setText("Error encountered while performing caculation.");
		}
		
	}
	public long fibonacci(long number) {
		if(number == 0 || number == 1)
			return number;
		else {
			return fibonacci(number -1) + fibonacci(number - 2);
		}
	}
}//end class BackgroundCalculator
